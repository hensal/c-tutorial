C - Type - What are uint8_t, uint16_t, uint32_t and uint64_t?

It turns out that they are equal respectively to: unsigned char, unsigned short, unsigned int and unsigned long long.

But what are ranges of all these types?

Explanation:
We're going to use a variable called testValue equal to 0xFFFFFFFFFFFFFFFF.

Notice that 0xFFFFFFFFFFFFFFFF is the same as 18,446,744,073,709,551,615 and this is the maximum value possible for an unsigned long long, depending on your processor architecture (as gineera said in its comment).

It's not so easy to understand all these things, but keep trying, it will be clearer after the end of this tutorial. At least, I hope it.

In the code part we will see that the number8 variable has a result of 255.
Why? Because 255 is the maximum value of an unsigned char or an uint8_t.
So if we put a value of 256, our result would be 0.
Indeed, after 255 we go back to 0.

For example if we added +1 for each number below, we'd have:
0 (First value of a char or 1 byte)
1
2
3
...
250
251
252
253
254
255 (Max value of a char or 1 byte)
0 (First value of a char or 1 byte)
1
2
3
... until 255 (Max value of a char or 1 byte)
0
1
2
3
... until 255 (Max value of a char or 1 byte)
0
1
2
3
and so on.

So we won't be able to have a value of 256 in a char (or a byte).
If we wanted to have a such value, we would have to use another type, for example an unsigned short or an uint16_t equal to 2 bytes or 16 bits.

Wow, this is still confuse? Let's continue!

Indeed, with an unsigned short, we will be able to use this type up a value of 65535 in decimal
or 0xFFFF in hex.

But in our example, we're going to use a huge value: 18,446,744,073,709,551,615.

And what we'll have will be the max value of each type!

Because this huge value is the maximum value of an unsigned long long.
So every type is set at the maximum value because they are a multiple of each maximum.

2^2 = 4
2^4 = 16
2^8 = 256
2^16 = 65536
2^32 = 4294967296
2^64 = 18446744073709551616

OK, but why the maximum value of a byte is 255 and not 256?
Because (2^8) - 1 = 256 - 1 = 255.
Indeed, our first value is 0 and not 1.
So the second is 1, the third is 2, and so on.
Thus, our last value is 255.

Code
// testValue
unsigned long long testValue     = 0xFFFFFFFFFFFFFFFF; // 18446744073709551615

// 1 byte -> [0-255] or [0x00-0xFF]
uint8_t         number8     = testValue; // 255
unsigned char    numberChar    = testValue; // 255

// 2 bytes -> [0-65535] or [0x0000-0xFFFF]
uint16_t         number16     = testValue; // 65535
unsigned short    numberShort    = testValue; // 65535

// 4 bytes -> [0-4294967295] or [0x00000000-0xFFFFFFFF]
uint32_t         number32     = testValue; // 4294967295
unsigned int     numberInt    = testValue; // 4294967295

 // 8 bytes -> [0-18446744073709551615] or [0x0000000000000000-0xFFFFFFFFFFFFFFFF]
uint64_t             number64         = testValue; // 18446744073709551615
unsigned long long     numberLongLong    = testValue; // 18446744073709551615

#TEST-2:
C - Type - Converting two uint8_t words into one of uint16_t and one of uint16_t into two of uint8_t:

Sometimes you need to convert one uint16_t variable into two uint8_t.

As we manipulate binaries, it's impossible to do something like that: 0xAB + 0xCD = 0xABCD.

Indeed, the result of 0xAB + 0xCD = 0x178 because 0xAB = 171 and 0xCD = 205.

So 0xAB + 0xCD = 376 in decimal but 0x178 in hexadecimal.

Furthermore, we cannot add more than 255 value inside a byte, because this is a 8-bit long number.

Let's see how to manipulate uint16_t and uint8_t types in this tutorial with an example.

Explanation
As said previously, we can't add hexadecimal numbers like decimals.

To be more easy, we've then to use the binary shifting.

In the code below we're converting two uint8_t words into a uint16_t one.
By using the "<< 8" we tell the compiler to move data from right to left:

    dataBoth = dataFirst; // dataBoth = 0x00AB
Indeed, 0x00AB = 00000000 10101011 (in binary).
So if we do:

result = 00000000 10101011 << 8
We have:

 result = 10101011 00000000
We have then just to do:

    dataBoth = dataBoth << 8; // dataBoth = 0xAB00
Finally we add 0x00CD to dataBoth with the OR gate:

dataBoth |= dataSecond; // dataBoth = 0xABCD

Because:

  10101011 00000000
+ 00000000 11001101
====================
= 10101011 11001101
And 10101011 11001101 = 0xABCD.

For the second function, we do the same but with the AND gate.
And we use a pointer on uint8_t to retrieve the two values.

I use two ways to add data and get them, one with the value at a certain memory address and one with the first element of an array.

Notice that they are exactly the same, indeed:

*(arrayData) = arrayData[0]
*(++arrayData) = arrayData[1]

Code
#include <time.h>
#include <stdio.h>

uint16_t convertFrom8To16(uint8_t dataFirst, uint8_t dataSecond) {
    uint16_t dataBoth = 0x0000;

    dataBoth = dataFirst;
    dataBoth = dataBoth << 8;
    dataBoth |= dataSecond;
    return dataBoth;
}

uint8_t *convertFrom16To8(uint16_t dataAll) {
    static uint8_t arrayData[2] = { 0x00, 0x00 };

    *(arrayData) = (dataAll >> 8) & 0x00FF;
    arrayData[1] = dataAll & 0x00FF;
    return arrayData;
}

int main() {
    uint8_t *dataMix;
    uint8_t data1 = 0xAB;
    uint8_t data2 = 0xCD;
    uint16_t data3 = 0x0000;

    data3 = convertFrom8To16(data1, data2);
    printf("data1 = %04X\n", data1);
    printf("data2 = %04X\n", data2);
    printf("data3 = %04X\n", data3);

    dataMix = convertFrom16To8(data3);
    printf("dataMix[0] = %02X\n", dataMix[0]);
    printf("(++dataMix) = %02X\n", *(++dataMix));
    return 0;
}

Result
data1 = 00AB
data2 = 00CD
data3 = ABCD
dataMix[0] = AB
(++dataMix) = CD

