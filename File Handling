https://www.programiz.com/c-programming/c-file-input-output
Why files are needed?
When a program is terminated, the entire data is lost. Storing in a file will preserve your data even if the program terminates.
If you have to enter a large number of data, it will take a lot of time to enter them all.
However, if you have a file containing all the data, you can easily access the contents of the file using a few commands in C.
You can easily move your data from one computer to another without any changes.

Types of Files
When dealing with files, there are two types of files you should know about:
    i.Text files
    ii.Binary files
1. Text files
Text files are the normal .txt files. You can easily create text files using any simple text editors such as Notepad.
2. Binary files
Binary files are mostly the .bin files in your computer.
Instead of storing data in plain text, they store it in the binary form (0's and 1's).
They can hold a higher amount of data, are not readable easily, and provides better security than text files.

File Operations
In C, you can perform four major operations on files, either text or binary:
i.Creating a new file
ii.Opening an existing file
iii.Closing a file
iv.Reading from and writing information to a file

Working with files
When working with files, you need to declare a pointer of type file. This declaration is needed for communication between the file and the program.
FILE *fptr;

Opening a file - for creation and edit
Opening a file is performed using the fopen() function defined in the stdio.h header file.
The syntax for opening a file in standard I/O is:
ptr = fopen("fileopen","mode");

Opening Modes in Standard I/O
Mode	             Meaning of Mode	                                                      During Inexistence of file
r	                Open for reading.	                                    If the file does not exist, fopen() returns NULL.
rb	         Open for reading in binary mode.             	            If the file does not exist, fopen() returns NULL.
w	                Open for writing.	                                    If the file exists, its contents are overwritten.If the file does not exist, it will be created.
wb	         Open for writing in binary mode.	                          If the file exists, its contents are overwritten.	If the file does not exist, it will be created.
a	                Open for append.                                      Data is added to the end of the file.	If the file does not exist, it will be created.
ab	         Open for append in binary mode.                            Data is added to the end of the file.	If the file does not exist, it will be created.
r+	         Open for both reading and writing.	                        If the file does not exist, fopen() returns NULL.
rb+	      Open for both reading and writing in binary mode.	            If the file does not exist, fopen() returns NULL.
w+	        Open for both reading and writing.	                        If the file exists, its contents are overwritten. If the file does not exist, it will be created.
wb+	     Open for both reading and writing in binary mode.	            If the file exists, its contents are overwritten.If the file does not exist, it will be created.
a+	         Open for both reading and appending.	                      If the file does not exist, it will be created.
ab+	     Open for both reading and appending in binary mode.	          If the file does not exist, it will be created.

Closing a File
The file (both text and binary) should be closed after reading/writing.
Closing a file is performed using the fclose() function.
fclose(fptr);
Here, fptr is a file pointer associated with the file to be closed.

Reading and writing to a text file
For reading and writing to a text file, we use the functions fprintf() and fscanf().
They are just the file versions of printf() and scanf().
The only difference is that fprintf() and fscanf() expects a pointer to the structure FILE.

Example 1: Write to a text file
#include <stdio.h>
#include <stdlib.h>
int main()
{
   int num;
   FILE *fptr;
   // use appropriate location if you are using MacOS or Linux
   fptr = fopen("C:\\program.txt","w");
   if(fptr == NULL)
   {
      printf("Error!");   
      exit(1);             
   }
   printf("Enter num: ");
   scanf("%d",&num);
   fprintf(fptr,"%d",num);
   fclose(fptr);
   return 0;
}
This program takes a number from the user and stores in the file program.txt.

Example 2: Read from a text file
#include <stdio.h>
#include <stdlib.h>
int main()
{
   int num;
   FILE *fptr;
   if ((fptr = fopen("C:\\program.txt","r")) == NULL){
       printf("Error! opening file");
       // Program exits if the file pointer returns NULL.
       exit(1);
   }
   fscanf(fptr,"%d", &num);
   printf("Value of n=%d", num);
   fclose(fptr);   
   return 0;
}
This program reads the integer present in the program.txt file and prints it onto the screen.
