typedef enum {
...
} MyEnum;

MyEnum MyEnumArray[] = ...;

[OR]

Remove the typedefstatement:

enum MyEnum{
A = 0,
B,
C,
D
} MyEnumArray[] = {A, B, C, D};

example:
#include <stdio.h>
enum week {Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday};

int main()
{
    // creating today variable of enum week type
    enum week today;
    today = Wednesday;
    printf("Day %d",today+1);
    return 0;
}

example2:
#include <stdio.h>
typedef enum
{
  ZERO,
  ONE, 
  TWO, 
  THREE,
  NUMBERS_N
} numbers_t;
int main()
{
    static const char* NUMBER_STR[NUMBERS_N] = 
{
  [ZERO]  = "ZERO",
  [ONE]   = "ONE",
  [TWO]   = "TWO",
  [THREE] = "THREE",
};
puts(NUMBER_STR[1]); // prints ONE
puts(NUMBER_STR[TWO]); // prints ONE
    return 0;
}

[or]
#include <stdio.h>  
 enum months{jan=1, feb, march, april, may, june, july, august, september, october, november, december};  
int main()  
{  
// printing the values of months  
 for(int i=jan;i<=december;i++)  
 {  
 printf("%d, ",i);  
 }  
    return 0;  
}  

#include <stdio.h>  
enum days{sunday=1, monday, tuesday, wednesday, thursday, friday, saturday};  
int main()  
{  
   enum days d;  
   d=monday;  
   switch(d)  
   {  
       case sunday:  
       printf("Today is sunday");  
       break;  
       case monday:  
       printf("Today is monday");  
       break;  
       case tuesday:  
       printf("Today is tuesday");  
       break;  
       case wednesday:  
       printf("Today is wednesday");  
       break;  
       case thursday:  
       printf("Today is thursday");  
       break;  
       case friday:  
       printf("Today is friday");  
       break;  
       case saturday:  
       printf("Today is saturday");  
       break;  
   }  
