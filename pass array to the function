// Program to calculate the sum of array elements by passing to a function 

#include <stdio.h>
float calculateSum(float num[]);                 //function prototype

int main() {
  float result, num[] = {23.4, 55, 22.6, 3, 40.5, 18};
  // num array is passed to calculateSum()
  result = calculateSum(num); 
  printf("Result = %.2f", result);
  return 0;
}

float calculateSum(float num[]) {
  float sum = 0.0;
  for (int i = 0; i < 6; ++i) {
    sum += num[i];
  }
  return sum;
}

[OR}

Passing array to function using call by value method
As we already know in this type of function call, the actual parameter is copied to the formal parameters.

#include <stdio.h>
void disp( char ch)
{
   printf("%c ", ch);
}
int main()
{
   char arr[] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'};
   for (int x=0; x<10; x++)
   {
       /* Iâ€™m passing each element one by one using subscript*/
       disp (arr[x]);
   }
   return 0;
}
Output:
a b c d e f g h i j

[or]
Passing array to function using call by reference
When we pass the address of an array while calling a function then this is called function call by reference. When we pass an address as an argument, the function declaration should have a pointer as a parameter to receive the passed address.

#include <stdio.h>
void disp( int *num)
{
    printf("%d ", *num);
}
int main()
{
     int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
     for (int i=0; i<10; i++)
     {
         /* Passing addresses of array elements*/
         disp (&arr[i]);
     }
     return 0;
}
Output:
1 2 3 4 5 6 7 8 9 0
